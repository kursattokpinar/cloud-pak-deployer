---
- debug:
    msg: "{{ _ds_instance }}"

- name: Generate DataStage runtime
  shell: date +%s%N | cut -b1-13
  register: _ds_instance_id_output

- set_fact:
    _ds_instance_name: "{{ _ds_instance.name }}"
    _ds_instance_namespace: "{{ current_cp4d_cluster.project }}"
    _ds_instance_size: "{{ _ds_instance.size }}"
    _ds_instance_storage_class: "{{ _ds_instance.storage_class | default(ocp_storage_class_file) }}"
    _ds_instance_storage_size_gb: "{{ _ds_instance.storage_size_gb }}Gi"
    _ds_instance_id: "{{ _ds_instance_id_output.stdout }}"

- name: "Validate if instance {{ _ds_instance_name }} already exists"
  shell: |
    oc get PxRuntime --no-headers -n {{ current_cp4d_cluster.project }} | grep "^{{ _ds_instance_name }}[[:space:]]" | wc -l
  register: _current_ds_instance

- when: not _current_ds_instance.stdout == "0"
  debug:
    msg: "DataStage instance {{ _ds_instance_name }} already available. Skipping provision..."

- when: _current_ds_instance.stdout == "0"
  block:

    - name: Create DataStage PXRuntime CRD yaml file
      template:
        src: ds_instance_40.yaml.j2
        dest: "{{ status_dir }}/cp4d/datastage-instance-40-cr.yaml"

    - name: Provision PxRunTime {{ _ds_instance_name }} 
      shell: |
        oc create -f {{ status_dir }}/cp4d/datastage-instance-40-cr.yaml
      register: _oc_create_ds

    - name: Wait for PxRuntime {{ _ds_instance_name }} deployment completes
      shell: |
        oc get pxruntime "{{ _ds_instance_name }}" -n {{ current_cp4d_cluster.project }} --output json | jq -r '.status.dsStatus' | grep -i 'completed' | wc -l 
      register: _deployed_datastage_service
      retries: 30
      delay: 60
      until: _deployed_datastage_service.stdout == "1"
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

    - name: Wait for PxRuntime {{ _ds_instance_name }} shows as running in CP4D
      shell: |
        curl -s -k \
          -H 'Authorization: Bearer {{ _cp4d_login_result.json.token }}' \
          -H 'Content-Type: application/json' \
          -X GET https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances/{{ _ds_instance_id }}/?include_service_status=true
      register: wait_for_pxruntime
      retries: 30
      delay: 30
      until: wait_for_pxruntime.stdout.find('"services_status":"RUNNING"') != -1
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

    - debug:
        msg: "DataStage PxRuntime {{ _ds_instance_name }} deployed and running successfully..."
