---
- name: Show Db2 instance
  debug:
    var: db2_instance

- name: "Check if the DB2 instance {{ db2_instance.name }} is already running"
  shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_db2oltp_instance_addon_type }}&display_name={{ db2_instance.name }}'"
  register: db2_instance_lookup_result

- set_fact:
    db2_instance_lookup_result_json: "{{ db2_instance_lookup_result.stdout | from_json }}"

- name: Determine if Db2 instance already exists
  debug:
    msg: "Db2 instance {{ db2_instance.name }} already exists in OpenShift project {{ current_cp4d_cluster.project }}, ending play provision_db2_instance"
  when: "not db2_instance_lookup_result_json.total_count == 0"


- when: "db2_instance_lookup_result_json.total_count == 0"
  block:
    - name: Get CP4D Database details
      shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/icp4data/api/v1/databases/'"
      register: databases_details_result

    - set_fact:
        databases_details: "{{ databases_details_result.stdout | from_json }}"

    - set_fact:
        db2_cartridge_details: "{{ databases_details.result | json_query(query_db2_details) }}"
      vars:
        cartridge_type: "db2oltp"
        query_db2_details: "[?type=='{{ cartridge_type }}']"

    - name: Show Db2 cartridge details
      debug:
        msg: "{{ db2_cartridge_details }}"

    - set_fact:
        db2_version: "{{ db2_cartridge_details[0].version }}"
        db2_repositories: " {{ db2_cartridge_details[0].create.repositories | regex_replace(\"'\", '\"')  }}"
        db2_chart: "{{ db2_cartridge_details[0].chart }}"

    - name: Prepare DB2 instance {{ db2_instance.name }} json file
      template:
        src: db2_instance_40.json.j2
        dest: "{{ status_dir }}/cp4d/db2_instance_40.json"

    - name: Create DB2 instance {{ db2_instance.name }}
      shell: "curl -v -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X POST 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances' -T {{ status_dir }}/cp4d/db2_instance_40.json"
      register: create_db2_instance_result

    - name: Show results of Db2 instance creation
      debug:
        msg: "{{ create_db2_instance_result }}"

    - name: Waiting for DB2 instance {{ db2_instance.name }} to complete its provisioning
      shell: "curl -s -k -H 'Authorization: Bearer {{ cp4d_login.token }}' -H 'Content-Type: application/json' -X GET 'https://{{ cp4d_url.stdout }}/zen-data/v3/service_instances?addon_type={{ cp4d_db2oltp_instance_addon_type }}&display_name={{ db2_instance.name }}'"
      register: wait_for_db2_service
      until: wait_for_db2_service.stdout.find('"provision_status":"PROVISIONED"') != -1
      retries: 60
      delay: 30 
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
