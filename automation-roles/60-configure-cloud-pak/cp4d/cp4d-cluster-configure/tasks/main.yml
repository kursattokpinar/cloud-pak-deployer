---
- name: Handling configuration for CP4D cluster
  debug:
    msg: "Handling configuration for CP4D cluster {{ current_cp4d_cluster.project }}"

- set_fact:
    _current_openshift_cluster: "{{ all_config.openshift | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ current_cp4d_cluster.openshift_cluster_name }}']

- name: Login to IBM Cloud
  include_role:
    name: login-ibmcloud
  when: cloud_platform == 'ibm-cloud'

- name: Login to the OpenShift cluster {{ current_cp4d_cluster.openshift_cluster_name }}
  include_role:
    name: openshift-login
  vars:
    _p_openshift_cluster_name: "{{ current_cp4d_cluster.openshift_cluster_name }}"

- name: Get storage class(es) applicable to Cloud Pak for Data instance {{ current_cp4d_cluster.project }}
  include_tasks: cp4d-get-storage-classes.yml

- name: Login to Cloud Pak for Data
  include_tasks: cluster-configure-prepare.yml

# Configure SSL certificate from the OpenShift Cluster to Cloud Pak for Data
- name: Configure Cloud Pak for Data SSL certificate
  include_role:
    name: cp4d-configure-ssl-certificate

# Audit configuration
- name: Configure Cloud Pak for Data audit
  include_role:
    name: cp4d-configure-audit

# LDAP configuration
- name: Configure Cloud Pak for Data LDAP configuration
  include_role:
    name: cp4d-configure-ldap

# Cloud Pak for Data Custom role configuration
- name: Handle Cloud Pak for Data custom roles configuration
  include_role:
    name: cp4d-roles
  when: "all_config.cp4d_role is defined"  

# Cloud Pak for Data User Groups Configuration
- when: "all_config.cp4d_user_group_configuration is defined"
  block:
    - name: Show CP4D user group configuration
      debug:
        msg: "{{ all_config.cp4d_user_group_configuration }}"  

    - set_fact:
        cp4d_user_group_config: "{{ all_config.cp4d_user_group_configuration|json_query(query_user_group) | first }}"
      vars:
        query_user_group: "[?openshift_cluster_name=='{{ current_cp4d_cluster.openshift_cluster_name }}' && project=='{{ current_cp4d_cluster.project }}']"

    - name: Show found CP4D user group configuration
      debug:
        msg: "{{ cp4d_user_group_config }}"

    - name: Create CP4D User Groups
      include_role:
        name: user_group
      loop: "{{ cp4d_user_group_config.user_groups | default([]) }}"
      loop_control:
        loop_var: cp4d_user_group 

- name: Configure CP4D SAML
  include_tasks: configure-cp4d-saml.yml

- name: Loop through all cartridges for instance configuration
  when: "current_cp4d_cluster.cartridges is defined"
  block:
    # Cartridge: DB2
    - set_fact:
        _db2_instance: "{{ current_cp4d_cluster.cartridges | json_query(query_cartridge) | first | default({}) }}"
      vars:
        cartridge_name: "db2"
        query_cartridge: "[?name=='{{ cartridge_name }}']"    

    - name: Provision DB2 instances
      include_role:
        name: provision_db2_instance
      when: 
      - _db2_instance != {} 
      - ( _db2_instance.state | default("installed") ) == "installed"

    # Cartridge: CA
    - set_fact:
        _ca_instance: "{{ current_cp4d_cluster.cartridges | json_query(query_cartridge) | first | default({}) }}"
      vars:
        cartridge_name: "ca"
        query_cartridge: "[?name=='{{ cartridge_name }}']"    

    - name: Provision Cognos instances
      include_role:
        name: provision_cognos_instance
      when: 
      - _ca_instance != {} 
      - ( _ca_instance.state | default("installed") ) == "installed"

    # Cartridge: DV
    - set_fact:
        _dv_instance: "{{ current_cp4d_cluster.cartridges | json_query(query_cartridge) | first | default({}) }}"
      vars:
        cartridge_name: "dv"
        query_cartridge: "[?name=='{{ cartridge_name }}']"    

    - name: Provision Data Virtualization instances
      include_role:
        name: provision_dv_instance
      when: 
      - _dv_instance != {} 
      - ( _dv_instance.state | default("installed") ) == "installed"

    # Cartridge: AnalyticsEngine
    - set_fact:
        _ae_instance: "{{ current_cp4d_cluster.cartridges | json_query(query_cartridge) | first | default({}) }}"
      vars:
        cartridge_name: "analyticsengine"
        query_cartridge: "[?name=='{{ cartridge_name }}']"    

    - name: Provision Analytics Engine instances
      include_role:
        name: provision_analyticsengine_instance
      when: 
      - _ae_instance != {} 
      - ( _ae_instance.state | default("installed") ) == "installed"

    # Cartridge: DataStage
    - set_fact:
        _datastage_instance: "{{ current_cp4d_cluster.cartridges | json_query(query_cartridge) | first | default({}) }}"
      vars:
        cartridge_name: "datastage"
        query_cartridge: "[?name=='{{ cartridge_name }}']"    

    - name: Provision DataStage instances
      include_role:
        name: provision_datastage_instance
      when: 
      - _datastage_instance != {} 
      - ( _datastage_instance.state | default("installed") ) == "installed"


# Handle instance configurations
- when: "all_config.cp4d_instance_configuration is defined"
  block:
    - set_fact:
        cp4d_instance_config: "{{ all_config.cp4d_instance_configuration|json_query(query_instance_config) | first }}"
      vars:
        query_instance_config: "[?openshift_cluster_name=='{{ current_cp4d_cluster.openshift_cluster_name }}' && project=='{{ current_cp4d_cluster.project }}']"    

    - name: Show CP4D instance configuration
      debug:
        msg: "{{ cp4d_instance_config }}"    

    - name: Configure CP4D instance authorization
      include_role:
        name: instance_configuration
      loop: "{{ cp4d_instance_config.cartridges | default([]) }}"
      loop_control:
        loop_var: _cp4d_instance

# Handle cp4d connections
- name: Handle Cloud Pak for Data Connections
  include_role:
    name: cp4d-connections
  when: "all_config.cp4d_connection is defined"        

# Handle cp4d backup-restore connections
- name: Handle Cloud Pak for Data backup-restore Connections
  include_role:
    name: cp4d-backup-restore-connections
  when: "all_config.cp4d_backup_restore_connections is defined"          