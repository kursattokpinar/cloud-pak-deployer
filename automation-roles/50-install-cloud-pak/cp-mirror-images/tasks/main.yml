---
- name: Validate mandatory variables for mirroring images are defined
  assert:
    that:
      - _p_target_registry_hostname is defined
      - _p_target_registry_credentials_secret is defined
      - _p_case_dir is defined

- name: Ensure {{ status_dir }}/cloud-paks exists
  file:
    path: "{{ status_dir }}/cloud-paks"
    state: directory
    
# Set variables for source registry if one was specified
- block:

  - name: Validate mandatory variables for mirroring images are defined
    assert:
      that:
        - _p_source_registry_credentials_secret is defined

  - name: Get source registry authentication details
    include_role: 
      name: vault-get-secret
    vars:
      secret_name: "{{ _p_source_registry_credentials_secret }}"
      secret_group: "{{ environment_name }}"

  - name: Fail if the credentials for the source image registry have not been found in the vault
    fail:
      msg: "Secret with credentials for source image registry ({{ _p_source_registry_credentials_secret }}) have not been found in the vault."
    when: 
    - secret_value == ""

  - set_fact:
      _registry_hostname: "{{ _p_source_registry_hostname }}"
      _registry_port: "{{ _p_source_registry_port | default('') }}"
      _registry_namespace: "{{ _p_source_registry_namespace | default('') }}"

  - set_fact:
      _source_registry_auth: "{{ secret_value }}"
      _source_registry_url: "{{ lookup('template','get_private_registry.j2') }}"
      _source_registry_url_namespace: "{{ lookup('template','get_private_registry_with_namespace.j2') }}"
  when: _p_source_registry_hostname is defined

- set_fact:
    _source_registry_url: "{{ _v_entitled_registry }}"
    _source_registry_auth: "{{ _v_entitled_registry_username }}:{{ ibm_cp_entitlement_key }}"
  when: not _p_source_registry_hostname is defined

# Set variables for target registry
- name: Get target registry authentication details
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ _p_target_registry_credentials_secret }}"
    secret_group: "{{ environment_name }}"

- name: Fail if the credentials for the target image registry have not been found in the vault
  fail:
    msg: "Secret with credentials for target image registry ({{ _p_target_registry_credentials_secret }}) have not been found in the vault."
  when: 
  - secret_value == ""

- set_fact:
    _registry_hostname: "{{ _p_target_registry_hostname }}"
    _registry_port: "{{ _p_target_registry_port | default('') }}"
    _registry_namespace: "{{ _p_target_registry_namespace | default('') }}"

- set_fact:
    _target_registry_auth: "{{ secret_value }}"
    _target_registry_url: "{{ lookup('template','get_private_registry.j2') }}"
    _target_registry_url_namespace: "{{ lookup('template','get_private_registry_with_namespace.j2') }}"

- name: Generate "{{ status_dir }}/cloud-paks/auth.json"
  template:
    src: auth.json.j2
    dest: "{{ status_dir }}/cloud-paks/auth.json"

# Mirror images from entitled registry to private registry
- include_tasks: mirror-images-from-entitled.yml
  when: not _p_source_registry_hostname is defined

# Mirror images from portable or private registry to private registry
- include_tasks: mirror-images-from-private.yml
  when: _p_source_registry_hostname is defined