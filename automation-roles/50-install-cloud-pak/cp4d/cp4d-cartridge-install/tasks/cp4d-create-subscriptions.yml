---
# Prepare for operator if cartridge state is installed
- block:
  - name: Prepare operator subscriptions
    debug:
      msg: "Preparing operator subscriptions for CP4D cartridge {{ current_cp4d_cartridge.name }} for CP4D cluster {{ current_cp4d_cluster.project }}"

  # Validate whether the subscription creation requires custom execution
  - name: Get subscription installation details for cartridge
    set_fact:
      _cartridge_details: "{{ case_inventories | json_query(jmes_query) | first }}"
    vars:
      jmes_query: "[?name == '{{ current_cp4d_cartridge.name }}']"

  # Custom preprpcessing of Subscription
  - name: "Run operator pre-processing script {{ _cartridge_details.operator_preprocessing_script }}"
    include_tasks: "{{ _cartridge_details.operator_preprocessing_script }}"
    when: (_cartridge_details.operator_preprocessing_script | default('')) != ''

  # Create of Subscription if not lite or cp-foundation
  - block:
    - name: Prepare yaml file for operator subscription {{ current_cp4d_cartridge.name }}
      template:
        src: "{{ current_cp4d_cartridge.name }}-sub.j2"
        dest: "{{ status_dir }}/cp4d/{{ current_cp4d_cluster.project }}-{{ current_cp4d_cartridge.name }}-sub.yml"

    - name: Create subscription for cartridge {{ current_cp4d_cartridge.name }}
      command: |
        oc apply -f "{{ status_dir }}/cp4d/{{ current_cp4d_cluster.project }}-{{ current_cp4d_cartridge.name }}-sub.yml"

    - name: Find label for cartridge {{ current_cp4d_cartridge.name }}
      set_fact:
        cartridge_csv_label: "{{ cartridge_csv | json_query(jmes_query) }}"
      vars:
        jmes_query: "[?name == '{{ current_cp4d_cartridge.name }}'].cartridge_label | [0]"

    - name: Fail if the label for the cartridge cannot be found
      fail:
        msg: "Label for cartridge {{ current_cp4d_cartridge.name }} not found, cannot check if CSV is successfully installed"
      when: 
      - cartridge_csv_label == ""

    # Wait until subscription for cartridge has been successfully created
    - name: Wait until CSV for cartridge {{ current_cp4d_cartridge.name }}, label {{ cartridge_csv_label }} has status Succeeded
      shell: |
        oc get csv -n {{ foundational_services_project }} \
          --no-headers \
          -l {{ cartridge_csv_label }} \
          -o custom-columns='name:metadata.name,phase:status.phase' | \
          grep -i succeeded | wc -l
      register: csv_status
      retries: 30
      delay: 30
      until: csv_status.stdout != "0"
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...
    when: 
    - current_cp4d_cartridge.name != "lite"
    - current_cp4d_cartridge.name != "cp-foundation"

  when: (current_cp4d_cartridge.state | default('installed')) == 'installed'