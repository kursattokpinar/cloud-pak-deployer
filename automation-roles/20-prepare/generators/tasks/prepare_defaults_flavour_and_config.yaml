---
# These facts are passed to this task-list via vars:
#
# <artifact_key> is the root attribute from the config
#   that contains the collection of configs we want to 
#   pass to the generator with name <artifact_key>
# <artifact_list> contains the collection of artifacts
#   inside the <artifact_key>
- name: set all_config
  set_fact:
    all_config: "{{ all_config | default({}) | combine( {artifact_key: []}) }}"




- name: merge each artifact_item with the default, it there is a default defined
    # 'combined' attributes win over the source-dicts attributes
    # msg: "{{ artifact_item | combine()  }}"
    # ! drop_keys is a custom filter_plugin !
    # This will give you the default-flavour
    # "{{ defaults_merged.get(artifact_key) | selectattr('flavour', 'equalto', 'default') | list | first | drop_keys(['flavour'])}}"
    # combine() <- here we need the flavour

    # will print the default flavour(without flavour:)
    # msg: "{{ defaults_merged.get(artifact_key) | selectattr('flavour', 'equalto', 'default') | list | first | drop_keys(['flavour'])}}"

    ########################### | selectattr('flavour', 'equalto', 'default' ) | combine(artifact_item)

  # - set_fact:
  include_tasks: process_defaults_flavour_and_config.yaml
  vars:
    this_item_artifact_key: "{{ artifact_key }}"
    this_item_config:  "{{ artifact_item }}"
  loop: "{{ artifact_list }}"
  loop_control:
    loop_var: artifact_item
  ### check if defaults_merged-dict has a key named i.e. "vsi"
  # when: "artifact_key|string in defaults_merged.keys()" 



  # TODO: could possibly be solved with jinja2
  # {{ defaults_merged | selectattr(artifact_key, "defined") }}



- name: Show artifact key
  debug:
    msg: "{{ artifact_key }}"